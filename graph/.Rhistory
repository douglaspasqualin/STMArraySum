tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
yticks <- c(0,5,10,15,20,25)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 20, label = "Less is better") +
scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
yticks <- c(0,5,10,15,20,25)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 20, label = "Less is better") +
scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
View(tgc)
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 20, label = "Less is better") +
# scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 20, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 20, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 211701172, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 212000000, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Exec. Time") +
annotate("text", x = 1.4, y = 215000000, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("aborts.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
#yticks <- c(0     211.701.172)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Threads") +
ylab("Total aborts") +
annotate("text", x = 1.4, y = 215000000, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
#scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
### SpeedUp calculation
tgc2 <- tgc
newColSpeed <- 8
ColTimeValue <- 4
seqBase <- tgc2[1,ColTimeValue]
seqLib <- tgc2[2,ColTimeValue]
seqMap <- tgc2[3,ColTimeValue]
#for 8 threads (mininum) speedup
speedup <- 1
tgc2[1,newColSpeed] <- speedup
tgc2[2,newColSpeed] <- speedup
tgc2[3,newColSpeed] <- speedup
#Calculate for another threads
for (i in 2:15) {
if (i %% 4) {
speedup <- seqBase/tgc2[i, ColTimeValue]
} else if (i %% 5) {
speedup <- seqLib/tgc2[i, ColTimeValue]
} else {
speedup <- seqMap/tgc2[i, ColTimeValue]
}
tgc2[i,newColSpeed] <- speedup
}
