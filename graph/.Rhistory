res = apply(cn, 1, cnt2)
res = data.frame(t(res))
names(res) = sub("X", "Step", names(res))
res[nrow(res)+1,] = colSums(res)
res$sum = rowSums(res)
excl = c(round(excl, 2), 0)
res = rbind(res, excl)
row.names(res)[nrow(res)] = "excl"
row.names(res)[nrow(res)-1] = "nmig"
res = cbind(id=rownames(res), res)
write.csv(res, file="page_dyn.csv", quote=F, row.names=F)
cat("Created file page_dyn.csv\n")
#!/usr/bin/env Rscript
files = list.files(pattern="\\.page\\.csv(\\.xz)?$")
files = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv""
nnodes = 8
cat("#nodes:", nnodes, "\n")
excl = c()
addn = function(frame) {
threads = grep("T\\d+", names(frame))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(frame)+1):(ncol(frame)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
cat("\t#threads:", nthreads)
for (i in 1:length(nodes)) {
frame[nodes[i]] = rowSums(frame[unlist(n[i])])
}
frame$sum = rowSums(frame[nodes])
frame$max = do.call(pmax, frame[nodes])
excl <<- c(excl, sum(frame$max, na.rm=TRUE)/sum(frame$sum, na.rm=TRUE)*100)
frame$cn = max.col(frame[nodes], ties.method="first")
frame = data.frame(frame$addr, frame$cn)
frame = frame[!duplicated(frame[,1]),]
return(frame)
}
tmp = list()
for (i in 1:length(files)) {
cat("Reading ", files[i], " (", i, "/" ,length(files), ")", sep="")
tmp[[i]] = addn(read.csv(files[i]))
cat("\tdone\n")
}
cn = tmp[[1]]
for (i in 2:length(tmp)) {
cat("Merging file ", i, "/", length(tmp), sep="")
cn = merge(cn, tmp[[i]], all=T, by=1)
names(cn)[ncol(cn)] = i
# cat (max(table(cn[,1])))
cat("\tdone\n")
}
# remove addr column
cn= cn[-1]
cnt2 = function(vec) {
cur = 0
res = vector()
for (i in 1:length(vec)) {
if (cur != vec[i] && !is.na(vec[i])) {
cur = vec[i]
res[i] = 1
} else {
res[i] = 0
}
}
res[match(1, res)] = 0
return (res)
}
res = apply(cn, 1, cnt2)
res = data.frame(t(res))
names(res) = sub("X", "Step", names(res))
res[nrow(res)+1,] = colSums(res)
res$sum = rowSums(res)
excl = c(round(excl, 2), 0)
res = rbind(res, excl)
row.names(res)[nrow(res)] = "excl"
row.names(res)[nrow(res)-1] = "nmig"
res = cbind(id=rownames(res), res)
write.csv(res, file="page_dyn.csv", quote=F, row.names=F)
cat("Created file page_dyn.csv\n")
#!/usr/bin/env Rscript
files = list.files(pattern="\\.page\\.csv(\\.xz)?$")
files = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 8
cat("#nodes:", nnodes, "\n")
excl = c()
addn = function(frame) {
threads = grep("T\\d+", names(frame))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(frame)+1):(ncol(frame)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
cat("\t#threads:", nthreads)
for (i in 1:length(nodes)) {
frame[nodes[i]] = rowSums(frame[unlist(n[i])])
}
frame$sum = rowSums(frame[nodes])
frame$max = do.call(pmax, frame[nodes])
excl <<- c(excl, sum(frame$max, na.rm=TRUE)/sum(frame$sum, na.rm=TRUE)*100)
frame$cn = max.col(frame[nodes], ties.method="first")
frame = data.frame(frame$addr, frame$cn)
frame = frame[!duplicated(frame[,1]),]
return(frame)
}
tmp = list()
for (i in 1:length(files)) {
cat("Reading ", files[i], " (", i, "/" ,length(files), ")", sep="")
tmp[[i]] = addn(read.csv(files[i]))
cat("\tdone\n")
}
cn = tmp[[1]]
for (i in 2:length(tmp)) {
cat("Merging file ", i, "/", length(tmp), sep="")
cn = merge(cn, tmp[[i]], all=T, by=1)
names(cn)[ncol(cn)] = i
# cat (max(table(cn[,1])))
cat("\tdone\n")
}
# remove addr column
cn= cn[-1]
cnt2 = function(vec) {
cur = 0
res = vector()
for (i in 1:length(vec)) {
if (cur != vec[i] && !is.na(vec[i])) {
cur = vec[i]
res[i] = 1
} else {
res[i] = 0
}
}
res[match(1, res)] = 0
return (res)
}
res = apply(cn, 1, cnt2)
res = data.frame(t(res))
names(res) = sub("X", "Step", names(res))
res[nrow(res)+1,] = colSums(res)
res$sum = rowSums(res)
excl = c(round(excl, 2), 0)
res = rbind(res, excl)
row.names(res)[nrow(res)] = "excl"
row.names(res)[nrow(res)-1] = "nmig"
res = cbind(id=rownames(res), res)
write.csv(res, file="page_dyn.csv", quote=F, row.names=F)
cat("Created file page_dyn.csv\n")
#!/usr/bin/env Rscript
library(treemap)
paste0 = function(..., sep = "") paste(..., sep = sep)
catn = function(...) cat(..., "\n")
local({r = getOption("repos"); r["CRAN"] = "http://cran.r-project.org"; options(repos=r)})
if (!suppressPackageStartupMessages(require(treemap))) {
install.packages("treemap")
library(treemap)
}
# Get command line arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args) < 2)
stop("Usage: mkPageUP.R <page.csv>... <#nodes>\n")
#filenames = args[1:(length(args)-1)]
#nnodes = as.numeric(args[length(args)])
filenames = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 8
for (filename in filenames) {
data = read.csv(filename)
outfilename = paste0(sub(".csv.xz", ".pageup", filename), ".pdf")
threads = grep("T\\d+", names(data))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(data)+1):(ncol(data)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
ttn=c()
for (i in 1:length(n)) ttn[n[[i]]-2] = i
catn("#nodes:", nnodes, "  #threads:", nthreads, "  #threads per node:", tpn)
for (i in 1:length(nodes))
data[nodes[i]] = rowSums(data[unlist(n[i])])
data = data[-threads]
nodes = c(3:ncol(data))
z = data[nodes]
y = nodes
data$sum = rowSums(data[nodes])
data$max = do.call(pmax, data[nodes])
data$excl = data$max / data$sum * 100
excl_min = ceiling(100/nnodes/10) * 10
# Round exclusivity and put >, < and %
data$excl_round = pmax(pmin(round(data$excl/10)*10, 90), excl_min)
data$excl_round = paste0(ifelse(data$excl_round==excl_min,"<",""), ifelse(data$excl_round=="90",">",""), data$excl_round, "%")
data$data.excl = factor(data$excl_round)
pdf(outfilename, family="NimbusSan", width=8, height=8)
options(warn=-1)
treemap(data,
index="excl_round",
vSize="sum",
vColor= "data.excl",
type="categorical",
aspRatio=1,
palette="Greys",
# palette=c("#FFFFFF","#D2D2D2","#A8A8A8","#7E7E7E","#545454","#2A2A2A","#000000"),
title="",
title.legend="Exclusivity level",
fontsize.labels=c(25,0,0),
fontsize.legend=20,
bg.labels="#FFFFFF",
algorithm="pivotSize",
sortID="color",
position.legend="bottom",
#overlap.labels=0
)
garbage = dev.off()
system(paste("pdfcrop ", outfilename, outfilename, "> /dev/null"))
catn("Exclusivity:", sum(data$max, na.rm=TRUE)/sum(data$sum, na.rm=TRUE)*100, "%")
catn("Generated", outfilename)
}
#!/usr/bin/env Rscript
library(treemap)
paste0 = function(..., sep = "") paste(..., sep = sep)
catn = function(...) cat(..., "\n")
local({r = getOption("repos"); r["CRAN"] = "http://cran.r-project.org"; options(repos=r)})
if (!suppressPackageStartupMessages(require(treemap))) {
install.packages("treemap")
library(treemap)
}
# Get command line arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args) < 2)
stop("Usage: mkPageUP.R <page.csv>... <#nodes>\n")
#filenames = args[1:(length(args)-1)]
#nnodes = as.numeric(args[length(args)])
filenames = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 8
for (filename in filenames) {
data = read.csv(filename)
outfilename = paste0(sub(".csv.xz", ".pageup", filename), ".pdf")
threads = grep("T\\d+", names(data))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(data)+1):(ncol(data)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
ttn=c()
for (i in 1:length(n)) ttn[n[[i]]-2] = i
catn("#nodes:", nnodes, "  #threads:", nthreads, "  #threads per node:", tpn)
for (i in 1:length(nodes))
data[nodes[i]] = rowSums(data[unlist(n[i])])
data = data[-threads]
nodes = c(3:ncol(data))
data$sum = rowSums(data[nodes])
data$max = do.call(pmax, data[nodes])
data$excl = data$max / data$sum * 100
excl_min = ceiling(100/nnodes/10) * 10
# Round exclusivity and put >, < and %
data$excl_round = pmax(pmin(round(data$excl/10)*10, 90), excl_min)
data$excl_round = paste0(ifelse(data$excl_round==excl_min,"<",""), ifelse(data$excl_round=="90",">",""), data$excl_round, "%")
data$data.excl = factor(data$excl_round)
pdf(outfilename, family="NimbusSan", width=8, height=8)
options(warn=-1)
treemap(data,
index="excl_round",
vSize="sum",
vColor= "data.excl",
type="categorical",
aspRatio=1,
palette="Greys",
# palette=c("#FFFFFF","#D2D2D2","#A8A8A8","#7E7E7E","#545454","#2A2A2A","#000000"),
title="",
title.legend="Exclusivity level",
fontsize.labels=c(25,0,0),
fontsize.legend=20,
bg.labels="#FFFFFF",
algorithm="pivotSize",
sortID="color",
position.legend="bottom",
#overlap.labels=0
)
garbage = dev.off()
system(paste("pdfcrop ", outfilename, outfilename, "> /dev/null"))
catn("Exclusivity:", sum(data$max, na.rm=TRUE)/sum(data$sum, na.rm=TRUE)*100, "%")
catn("Generated", outfilename)
}
View(data)
#!/usr/bin/env Rscript
library(treemap)
paste0 = function(..., sep = "") paste(..., sep = sep)
catn = function(...) cat(..., "\n")
local({r = getOption("repos"); r["CRAN"] = "http://cran.r-project.org"; options(repos=r)})
if (!suppressPackageStartupMessages(require(treemap))) {
install.packages("treemap")
library(treemap)
}
# Get command line arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args) < 2)
stop("Usage: mkPageUP.R <page.csv>... <#nodes>\n")
#filenames = args[1:(length(args)-1)]
#nnodes = as.numeric(args[length(args)])
filenames = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 8
for (filename in filenames) {
data = read.csv(filename)
outfilename = paste0(sub(".csv.xz", ".pageup", filename), ".pdf")
threads = grep("T\\d+", names(data))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(data)+1):(ncol(data)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
ttn=c()
for (i in 1:length(n)) ttn[n[[i]]-2] = i
catn("#nodes:", nnodes, "  #threads:", nthreads, "  #threads per node:", tpn)
for (i in 1:length(nodes))
data[nodes[i]] = rowSums(data[unlist(n[i])])
z = -threads
data = data[-threads]
nodes = c(3:ncol(data))
data$sum = rowSums(data[nodes])
data$max = do.call(pmax, data[nodes])
data$excl = data$max / data$sum * 100
excl_min = ceiling(100/nnodes/10) * 10
# Round exclusivity and put >, < and %
data$excl_round = pmax(pmin(round(data$excl/10)*10, 90), excl_min)
data$excl_round = paste0(ifelse(data$excl_round==excl_min,"<",""), ifelse(data$excl_round=="90",">",""), data$excl_round, "%")
data$data.excl = factor(data$excl_round)
pdf(outfilename, family="NimbusSan", width=8, height=8)
options(warn=-1)
treemap(data,
index="excl_round",
vSize="sum",
vColor= "data.excl",
type="categorical",
aspRatio=1,
palette="Greys",
# palette=c("#FFFFFF","#D2D2D2","#A8A8A8","#7E7E7E","#545454","#2A2A2A","#000000"),
title="",
title.legend="Exclusivity level",
fontsize.labels=c(25,0,0),
fontsize.legend=20,
bg.labels="#FFFFFF",
algorithm="pivotSize",
sortID="color",
position.legend="bottom",
#overlap.labels=0
)
garbage = dev.off()
system(paste("pdfcrop ", outfilename, outfilename, "> /dev/null"))
catn("Exclusivity:", sum(data$max, na.rm=TRUE)/sum(data$sum, na.rm=TRUE)*100, "%")
catn("Generated", outfilename)
}
#!/usr/bin/env Rscript
library(treemap)
paste0 = function(..., sep = "") paste(..., sep = sep)
catn = function(...) cat(..., "\n")
local({r = getOption("repos"); r["CRAN"] = "http://cran.r-project.org"; options(repos=r)})
if (!suppressPackageStartupMessages(require(treemap))) {
install.packages("treemap")
library(treemap)
}
# Get command line arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args) < 2)
stop("Usage: mkPageUP.R <page.csv>... <#nodes>\n")
#filenames = args[1:(length(args)-1)]
#nnodes = as.numeric(args[length(args)])
filenames = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 1
for (filename in filenames) {
data = read.csv(filename)
outfilename = paste0(sub(".csv.xz", ".pageup", filename), ".pdf")
threads = grep("T\\d+", names(data))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(data)+1):(ncol(data)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
ttn=c()
for (i in 1:length(n)) ttn[n[[i]]-2] = i
catn("#nodes:", nnodes, "  #threads:", nthreads, "  #threads per node:", tpn)
for (i in 1:length(nodes))
data[nodes[i]] = rowSums(data[unlist(n[i])])
data = data[-threads]
nodes = c(3:ncol(data))
data$sum = rowSums(data[nodes])
data$max = do.call(pmax, data[nodes])
data$excl = data$max / data$sum * 100
excl_min = ceiling(100/nnodes/10) * 10
# Round exclusivity and put >, < and %
data$excl_round = pmax(pmin(round(data$excl/10)*10, 90), excl_min)
data$excl_round = paste0(ifelse(data$excl_round==excl_min,"<",""), ifelse(data$excl_round=="90",">",""), data$excl_round, "%")
data$data.excl = factor(data$excl_round)
pdf(outfilename, family="NimbusSan", width=8, height=8)
options(warn=-1)
treemap(data,
index="excl_round",
vSize="sum",
vColor= "data.excl",
type="categorical",
aspRatio=1,
palette="Greys",
# palette=c("#FFFFFF","#D2D2D2","#A8A8A8","#7E7E7E","#545454","#2A2A2A","#000000"),
title="",
title.legend="Exclusivity level",
fontsize.labels=c(25,0,0),
fontsize.legend=20,
bg.labels="#FFFFFF",
algorithm="pivotSize",
sortID="color",
position.legend="bottom",
#overlap.labels=0
)
garbage = dev.off()
system(paste("pdfcrop ", outfilename, outfilename, "> /dev/null"))
catn("Exclusivity:", sum(data$max, na.rm=TRUE)/sum(data$sum, na.rm=TRUE)*100, "%")
catn("Generated", outfilename)
}
View(n)
n[["1"]]
#!/usr/bin/env Rscript
library(treemap)
paste0 = function(..., sep = "") paste(..., sep = sep)
catn = function(...) cat(..., "\n")
local({r = getOption("repos"); r["CRAN"] = "http://cran.r-project.org"; options(repos=r)})
if (!suppressPackageStartupMessages(require(treemap))) {
install.packages("treemap")
library(treemap)
}
# Get command line arguments
args = commandArgs(trailingOnly=TRUE)
if (length(args) < 2)
stop("Usage: mkPageUP.R <page.csv>... <#nodes>\n")
#filenames = args[1:(length(args)-1)]
#nnodes = as.numeric(args[length(args)])
filenames = "/home/douglas/Desktop/numalize/scripts/ssca2.full.page.csv"
nnodes = 8
for (filename in filenames) {
data = read.csv(filename)
outfilename = paste0(sub(".csv.xz", ".pageup", filename), ".pdf")
threads = grep("T\\d+", names(data))
nthreads = length(threads)
tpn = nthreads / nnodes
nodes = c((ncol(data)+1):(ncol(data)+nnodes))
n = split(threads, ceiling(seq_along(threads)/tpn))
ttn=c()
for (i in 1:length(n)) ttn[n[[i]]-2] = i
catn("#nodes:", nnodes, "  #threads:", nthreads, "  #threads per node:", tpn)
for (i in 1:length(nodes))
data[nodes[i]] = rowSums(data[unlist(n[i])])
data = data[-threads]
nodes = c(3:ncol(data))
data$sum = rowSums(data[nodes])
data$max = do.call(pmax, data[nodes])
data$excl = data$max / data$sum * 100
excl_min = ceiling(100/nnodes/10) * 10
# Round exclusivity and put >, < and %
data$excl_round = pmax(pmin(round(data$excl/10)*10, 90), excl_min)
data$excl_round = paste0(ifelse(data$excl_round==excl_min,"<",""), ifelse(data$excl_round=="90",">",""), data$excl_round, "%")
data$data.excl = factor(data$excl_round)
pdf(outfilename, family="NimbusSan", width=8, height=8)
options(warn=-1)
treemap(data,
index="excl_round",
vSize="sum",
vColor= "data.excl",
type="categorical",
aspRatio=1,
palette="Greys",
# palette=c("#FFFFFF","#D2D2D2","#A8A8A8","#7E7E7E","#545454","#2A2A2A","#000000"),
title="",
title.legend="Exclusivity level",
fontsize.labels=c(25,0,0),
fontsize.legend=20,
bg.labels="#FFFFFF",
algorithm="pivotSize",
sortID="color",
position.legend="bottom",
#overlap.labels=0
)
garbage = dev.off()
system(paste("pdfcrop ", outfilename, outfilename, "> /dev/null"))
catn("Exclusivity:", sum(data$max, na.rm=TRUE)/sum(data$sum, na.rm=TRUE)*100, "%")
catn("Generated", outfilename)
}
install.packages("optparse")
setwd("/home/douglas/STMArraySum/graph")
tg <- read.table("execTime.txt", sep="\t" ) # read a table from the file, using TAB as separator
library(ggplot2)
library(lattice)
library(plyr)
library(Rmisc) #needed for summarySE function
require(scales)
Legend <-"Configuration"
originalNames <- c("Default", "Worst", "ZBest")
newNames <- c("OS Default", "Worst Pin", "Best Pin")
# summarySE provides the standard deviation, standard error of the mean, and a (default 95%) confidence interval
tgc <- summarySE(tg, measurevar="V1", groupvars=c("V2","V3"))
yticks <- c(0,10,20,30,40,50)
#Plot graphic
ggplot(tgc, aes(x=factor(V2), y=V1, fill=V3)) +
geom_bar(position=position_dodge(), stat="identity",
colour="black", # Use black outlines,
size=.3) +     # Thinner lines
geom_errorbar(aes(ymin=V1-sd, ymax=V1+sd),
size=.3,    # Thinner lines
width=.2,
position=position_dodge(.9)) +
ggtitle(expression(atop("STM array sum", atop(italic("16.000.000 elements"))))) +
#ggtitle("LULESH") +
xlab("Machines") +
ylab("Exec. Time") +
annotate("text", x = 0.7, y = 40, label = "Less is better") +
#scale_y_continuous(limits=c(0,NA), breaks=yticks, labels=yticks) +
coord_cartesian(ylim = c(0, 40)) +
#  scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
#                labels = trans_format("log10", math_format(10^.x))) +
scale_fill_manual(values = c("#006699", "#993300", "#008833"),
name=Legend, # Legend label, use darker colors
breaks=originalNames,
labels=newNames) +
theme(plot.title = element_text(hjust = 0.5)) #centered title
